<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zhao.mapper.ArticleMapper">

    <resultMap id="ArticleByMap" type="com.zhao.dto.ArticleBackDTO">
        <result property="articleId" column="article_id"/>
        <result property="articleTitle" column="article_title"/>
        <result property="articleContent" column="article_content"/>
        <result property="articleCover" column="article_cover"/>
        <result property="categoryName" column="category_name"/>
        <result property="originalUrl" column="original_url"/>
        <result property="type" column="type"/>
        <result property="isTop" column="is_top"/>
        <result property="status" column="status"/>
        <collection property="tagNameList" ofType="String">
            <result column="tag_name"/>
        </collection>
    </resultMap>

    <resultMap id="ArticleBlogDTOList" type="com.zhao.dto.ArticleBlogDTO">
        <id property="articleId" column="article_id"/>
        <result property="articleContent" column="article_content"/>
        <result property="articleTitle" column="article_title"/>
        <result property="articleCover" column="article_cover"/>
        <result property="isTop" column="is_top"/>
        <result property="createTime" column="create_time"/>
        <result property="updateTime" column="update_time"/>
        <result property="categoryId" column="category_id"/>
        <result property="categoryName" column="category_name"/>
        <result property="nickname" column="nickname"/>
        <collection property="tagList" ofType="com.zhao.dto.TagDTO">
            <result property="tagId" column="tag_id"/>
            <result property="tagName" column="tag_name"/>
        </collection>
    </resultMap>

    <resultMap id="ArticleDTOList" type="com.zhao.dto.ArticleDTO">
        <id property="articleId" column="article_id"/>
        <result property="articleTitle" column="article_title"/>
        <result property="articleCover" column="article_cover"/>
        <result property="isTop" column="is_top"/>
        <result property="createTime" column="create_time"/>
        <result property="categoryName" column="category_name"/>
        <result property="status" column="status"/>
        <result property="isDelete" column="is_delete"/>
        <result property="type" column="type"/>
        <collection property="tagDTOList" ofType="com.zhao.dto.TagDTO">
            <result property="tagId" column="tag_id"/>
            <result property="tagName" column="tag_name"/>
        </collection>
    </resultMap>

    <select id="getArticleById"  parameterType="int" resultMap="ArticleByMap">
        select
            a.article_id,
            a.article_title,
            a.article_content,
            a.article_cover,
            tc.category_name,
            t.tag_name,
            a.is_top,
            a.type,
            a.status,
            a.original_url
        from myblog.tb_new_article a
        left join myblog.tb_category tc on a.category_id = tc.category_id
        left join myblog.tb_article_tag tat on a.article_id = tat.article_id
        left join myblog.tb_tag t on t.tag_id = tat.tag_id
        where a.article_id = #{articleId} and a.is_delete = 0
    </select>

    <update id="updateArticleDelete">
        update myblog.tb_new_article tna
        set tna.is_delete = #{isDelete}
        where tna.article_id in
        (
            <foreach collection="ids" separator="," item="id">
                #{id}
            </foreach>
        )
    </update>

    <update id="updateTop">
        update myblog.tb_new_article tna
        set tna.is_top = #{ArticleTop.isTop}
        where tna.article_id = #{ArticleTop.id}
    </update>

    <delete id="deleteBatchById">
        delete
        from myblog.tb_new_article tna
        where tna.article_id in
        (
        <foreach collection="ids" separator="," item="id">
            #{id}
        </foreach>
        );
    </delete>

    <select id="getListArticle" resultMap="ArticleDTOList">
        select
        a.article_id,
        a.article_title,
        a.article_cover,
        a.category_name,
        a.is_top,
        a.is_delete,
        a.create_time,
        a.status,
        a.type,
        ta.tag_id,
        ta.tag_name
        from
        (
        select
        distinct
        a.article_id,
        a.article_title,
        a.article_cover,
        tc.category_name,
        a.is_top,
        a.is_delete,
        a.create_time,
        a.status,
        a.type
        from
        myblog.tb_new_article a
        LEFT JOIN myblog.tb_category tc on a.category_id = tc.category_id
        LEFT JOIN myblog.tb_article_tag tat on  a.article_id = tat.article_id
        <where>
            a.is_delete = #{condition.isDelete}
            <if test="condition.keywords != null and condition.keywords != ''">
                and a.article_title like concat('%',#{condition.keywords},'%')
            </if>
            <if test="condition.status != null">
                and a.`status` = #{condition.status}
            </if>
            <if test="condition.categoryId != null">
                and a.category_id = #{condition.categoryId}
            </if>
            <if test="condition.type != null">
                and a.`type` = #{condition.type}
            </if>
            <if test="condition.tagId != null">
                and tat.tag_id = #{condition.tagId}
            </if>
        </where>
        order by a.is_top desc
        limit #{condition.current},#{condition.size}
        ) a
        left join myblog.tb_article_tag at on a.article_id = at.article_id
        left join myblog.tb_tag ta on ta.tag_id = at.tag_id
    </select>

    <select id="getTagNameByArticleId" resultType="java.lang.String">
        select
            t.tag_name
        from myblog.tb_new_article a,myblog.tb_article_tag at,myblog.tb_tag t
        where a.article_id = at.article_id and a.is_delete = 0
          and at.tag_id = t.tag_id
          and a.article_id = #{id}
    </select>

    <select id="listArticles" resultMap="ArticleBlogDTOList">
        select
            a.article_id,
            a.article_title,
            a.article_content,
            a.article_cover,
            a.is_top,
            a.create_time,
            a.category_id,
            a.category_name,
            ta.tag_id,
            ta.tag_name
        from
            (
                select
                    a.article_id,
                    a.article_title,
                    a.article_content,
                    a.article_cover,
                    a.is_top,
                    a.create_time,
                    c.category_id,
                    c.category_name
                from myblog.tb_new_article a
                         left join myblog.tb_category c on a.category_id = c.category_id
                where
                    a.is_delete = 0
                  and a.status = 1
                order by a.is_top desc
                limit #{current},1
            ) a
        left join myblog.tb_article_tag at on a.article_id = at.article_id
        left join myblog.tb_tag ta on ta.tag_id = at.tag_id
    </select>

    <select id="getArticleByIdBlog" resultMap="ArticleBlogDTOList">
        select
            a.article_id,
            a.article_title,
            a.article_content,
            a.article_cover,
            a.is_top,
            a.create_time,
            a.update_time,
            a.category_id,
            a.category_name,
            a.nickname,
            ta.tag_id,
            ta.tag_name
        from
            (
                select
                    a.article_id,
                    a.article_title,
                    a.article_content,
                    a.article_cover,
                    a.is_top,
                    u.nickname,
                    a.create_time,
                    a.update_time,
                    c.category_id,
                    c.category_name
                from myblog.tb_new_article a
                left join myblog.tb_category c on a.category_id = c.category_id
                left join myblog.tb_user u on a.user_id = u.user_id
                where
                    a.is_delete = 0
                  and a.status = 1
                  and a.article_id = #{articleId}
            ) a
        left join myblog.tb_article_tag at on a.article_id = at.article_id
        left join myblog.tb_tag ta on ta.tag_id = at.tag_id
    </select>

    <select id="selectLastArticle" resultType="com.zhao.dto.ArticlePaginationDTO">
        select
        a.article_id,
        a.article_title,
        a.article_cover
        from myblog.tb_new_article a
        where a.article_id &lt; #{articleId}
          and a.is_delete = 0
          and a.status = 1
        order by a.article_id desc
        limit 1
    </select>

    <select id="selectNextArticle" resultType="com.zhao.dto.ArticlePaginationDTO">
        select
            a.article_id,
            a.article_title,
            a.article_cover
        from myblog.tb_new_article a
        where a.article_id &gt; #{articleId}
          and a.is_delete = 0
          and a.status = 1
        order by a.article_id asc
        limit 1
    </select>

    <select id="queryNewArticleList" resultType="com.zhao.dto.ArticleRecommendDTO">
        select
            a.article_id,
            a.article_title,
            a.article_cover,
            a.create_time
        from myblog.tb_new_article a
        where  a.is_delete = 0
        and a.status = 1
        order by a.article_id desc
        limit 5
    </select>

    <select id="queryRecommendArticleList" resultType="com.zhao.dto.ArticleRecommendDTO">
        SELECT
            a.article_id,
            a.article_title,
            a.article_cover,
            a.create_time
        FROM
            (
                SELECT DISTINCT
                    t1.article_id
                FROM
                        (SELECT tag_id FROM myblog.tb_article_tag WHERE article_id = #{articleId}) t
                            JOIN myblog.tb_article_tag t1 ON t.tag_id = t1.tag_id
                WHERE t1.article_id != #{articleId}
            ) t2
        inner join myblog.tb_new_article a on t2.article_id = a.article_id
        WHERE a.is_delete = 0
          and a.status = 1
        order by a.is_top desc,
                 a.article_id desc
        limit 6;
    </select>

    <select id="listArticleStatistics" resultType="com.zhao.dto.ArticleStatisticsDTO">
        SELECT
            DATE_FORMAT( create_time, '%Y-%m-%d' ) AS `date`,
            COUNT( 1 ) AS `count`
        FROM
            myblog.tb_new_article
        GROUP BY
            date
        ORDER BY
            date DESC
    </select>

    <select id="getArticle" resultType="com.zhao.pojo.Article">
        select
               a.article_title
        from myblog.tb_new_article a
        where a.article_id = #{articleId}
    </select>

    <select id="countArticleBacks" resultType="java.lang.Integer">
        SELECT
        count(DISTINCT a.article_id)
        from
        myblog.tb_new_article a
        LEFT JOIN myblog.tb_article_tag tat on  a.article_id = tat.article_id
        <where>
            a.is_delete = #{condition.isDelete}
            <if test="condition.keywords != null">
                and a.article_title like concat('%',#{condition.keywords},'%')
            </if>
            <if test="condition.status != null">
                and a.`status` = #{condition.status}
            </if>
            <if test="condition.categoryId != null">
                and a.category_id = #{condition.categoryId}
            </if>
            <if test="condition.type != null">
                and a.type = #{condition.type}
            </if>
            <if test="condition.tagId != null">
                and tat.tag_id = #{condition.tagId}
            </if>
        </where>
    </select>

    <select id="getArchives" resultType="com.zhao.dto.ArchivesDTO">
        select
            tna.article_id,
            tna.article_title,
            tna.create_time
        from myblog.tb_new_article tna
        where tna.is_delete = 0
        and tna.status = 1
        order by tna.create_time asc
        limit #{current},10;
    </select>
</mapper>
